import { Server, Socket } from "socket.io";
import prisma from "../utils/prisma";

export function roomHandlers(io: Server, socket: Socket) {
  // üü¢ ”®—Ä”©”©–Ω–∏–π –º—ç–¥—ç—ç–ª—ç–ª –∞–≤–∞—Ö —Ç—É—Å–ª–∞—Ö —Ñ—É–Ω–∫—Ü
  const getRoomData = async (roomCode: string) => {
    const roomWithPlayers = await prisma.room.findUnique({
      where: { code: roomCode },
      include: { player: true },
    });

    if (!roomWithPlayers) return null;

    return {
      roomCode: roomWithPlayers.code,
      host: roomWithPlayers.player.find((p) => p.isHost)?.name || null,
      players: roomWithPlayers.player.map((p) => ({
        id: p.id,
        name: p.name,
        isHost: p.isHost,
      })),
      gameType: roomWithPlayers.gameType ?? null,
      currentGame: roomWithPlayers.selectedGame ?? null,
    };
  };

  // üü¢ –¢–æ–≥–ª–æ–≥—á ”©—Ä”©”©–Ω–¥ –Ω—ç–≤—Ç—Ä—ç—Ö
  socket.on("joinRoom", async ({ roomCode, playerName }) => {
    if (!roomCode || !playerName) {
      socket.emit("joinError", {
        message: "Room code –±–æ–ª–æ–Ω player name —à–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π.",
      });
      return;
    }

    try {
      const room = await prisma.room.findUnique({
        where: { code: roomCode },
      });

      if (!room) {
        socket.emit("joinError", {
          message: "”®—Ä”©”© –æ–ª–¥—Å–æ–Ω–≥“Ø–π. –ö–æ–¥–æ–æ —à–∞–ª–≥–∞–Ω–∞ —É—É.",
        });
        return;
      }

      socket.join(roomCode);

      // –≠–Ω—ç –Ω—ç—Ä—Ç—ç–π —Ç–æ–≥–ª–æ–≥—á –±–∞–π–≥–∞–∞ —ç—Å—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö
      const existingPlayer = await prisma.player.findUnique({
        where: {
          name_roomId: {
            name: playerName,
            roomId: room.id,
          },
        },
      });

      let isHost = false;

      if (existingPlayer) {
        // ”©–º–Ω”©—Ö —Ç–æ–≥–ª–æ–≥—á ‚Üí —Ö–æ—Å—Ç —Å—Ç–∞—Ç—É—Å —Ö–∞–¥–≥–∞–ª–Ω–∞
        isHost = existingPlayer.isHost;
      } else {
        // –•—ç—Ä—ç–≤ ”©—Ä”©”©–Ω–¥ —Ö–æ—Å—Ç –±–∞–π—Ö–≥“Ø–π –±–æ–ª –∞–Ω—Ö–Ω—ã —Ç–æ–≥–ª–æ–≥—á–∏–π–≥ —Ö–æ—Å—Ç –±–æ–ª–≥–æ–Ω–æ
        const hostExists = await prisma.player.count({
          where: { roomId: room.id, isHost: true },
        });
        isHost = hostExists === 0;
      }

      // –¢–æ–≥–ª–æ–≥—á–∏–π–≥ —à–∏–Ω—ç—ç—Ä “Ø“Ø—Å–≥—ç—Ö —ç—Å–≤—ç–ª socketId-–≥ —à–∏–Ω—ç—á–ª—ç—Ö
      await prisma.player.upsert({
        where: {
          name_roomId: {
            name: playerName,
            roomId: room.id,
          },
        },
        update: { socketId: socket.id },
        create: {
          name: playerName,
          socketId: socket.id,
          roomId: room.id,
          isHost,
        },
      });

      // ”®—Ä”©”©–Ω–∏–π —à–∏–Ω—ç –º—ç–¥—ç—ç–ª–ª–∏–π–≥ –±“Ø—Ö —Ç–æ–≥–ª–æ–≥—á–¥–æ–¥ –∏–ª–≥—ç—ç—Ö
      const updatedRoomData = await getRoomData(roomCode);
      if (updatedRoomData) {
        io.in(roomCode).emit("roomData", updatedRoomData);
      }
    } catch (err: any) {
      console.error("joinRoom error:", err);
      socket.emit("joinError", {
        message: err.message || "”®—Ä”©”©–Ω–¥ –Ω—ç–≤—Ç—Ä—ç—Ö—ç–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.",
      });
    }
  });

  // üü¢ –•–æ—Å—Ç —Ç–æ–≥–ª–æ–æ–º —Å–æ–Ω–≥–æ—Ö
  socket.on("host:select_game", async ({ roomCode, gameType }) => {
    console.log("host:select_game –∏—Ä–ª—ç—ç:", roomCode, gameType);
    try {
      await prisma.room.update({
        where: { code: roomCode },
        data: { selectedGame: gameType },
      });

      const updatedRoomData = await getRoomData(roomCode);
      if (updatedRoomData) {
        io.in(roomCode).emit("roomData", updatedRoomData);
      }
    } catch (err) {
      console.error("host:select_game error:", err);
      socket.emit("roomError", {
        message: "–¢–æ–≥–ª–æ–æ–º —Å–æ–Ω–≥–æ—Ö–æ–¥ –∞–ª–¥–∞–∞ –≥–∞—Ä–ª–∞–∞.",
      });
    }
  });

  // üü¢ –¢–æ–≥–ª–æ–≥—á –≥–∞—Ä–∞—Ö (socket —Ç–∞—Å—Ä–∞—Ö “Ø–µ–¥)
  socket.on("disconnecting", async () => {
    try {
      const player = await prisma.player.findFirst({
        where: { socketId: socket.id },
        include: { room: true },
      });

      if (!player) return;

      const { room, isHost, id: playerId, roomId } = player;
      const roomCode = room.code;

      // —Ç–æ–≥–ª–æ–≥—á–∏–π–≥ —É—Å—Ç–≥–∞—Ö
      await prisma.player.delete({ where: { id: playerId } });

      const remainingPlayers = await prisma.player.findMany({
        where: { roomId },
      });

      // ”©—Ä”©”©–Ω–¥ —Ö“Ø–Ω “Ø–ª–¥—ç—ç–≥“Ø–π –±–æ–ª ”©—Ä”©”©–≥ —É—Å—Ç–≥–∞–Ω–∞
      if (remainingPlayers.length === 0) {
        await prisma.room.delete({ where: { id: roomId } });
        return;
      }

      // —Ö—ç—Ä—ç–≤ —Ö–æ—Å—Ç –≥–∞—Ä—Å–∞–Ω –±–æ–ª —à–∏–Ω—ç —Ö–æ—Å—Ç —Å–æ–Ω–≥–æ–Ω–æ
      if (isHost) {
        await prisma.player.update({
          where: { id: remainingPlayers[0].id },
          data: { isHost: true },
        });
      }

      // —à–∏–Ω—ç—á–∏–ª—Å—ç–Ω ”©—Ä”©”©–Ω–∏–π –º—ç–¥—ç—ç–ª—ç–ª –¥–∞–º–∂—É—É–ª–∞—Ö
      const updatedRoomData = await getRoomData(roomCode);
      if (updatedRoomData) {
        io.in(roomCode).emit("roomData", updatedRoomData);
      }
    } catch (err) {
      console.error("disconnecting error:", err);
    }
  });
}
